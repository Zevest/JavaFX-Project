class QuadTree {
  int node_capacity = 4;
  AABB boundary;
  int level;
  ArrayList<Particle> points;
  ArrayList<QuadTree> child;
  boolean subdivided;
  
  QuadTree(float x, float y, float size){
    boundary = new AABB(x, y, size);
    points = new ArrayList<Particle>();
    child = new ArrayList<QuadTree>();
    level = 0;
    subdivided = false;
  }
  
  QuadTree(float x, float y, float sizeX, float sizeY,int  lvl){
    boundary = new AABB(x, y, sizeX, sizeY);
    points = new ArrayList<Particle>();
    child = new ArrayList<QuadTree>();
    level = lvl;
    subdivided = false;
  }
  
  // Inserer un point dans le QuadTree
  boolean insert(Particle p){
    // Ignorer les objets qui n'appartiennent pas a ce quadtree
    if(!boundary.containsPoint(p.pos.x,p.pos.y))
      return false;// l'objet ne doit pas etre ajoute 
    
    // S'il reste de la place dans ce quadtree, y ajouter l'objet
    if(points.size() < node_capacity){
        points.add(p);
        return true;
    }
    
    // Sinon, subdiviser le quadtree, puis ajouter le point au noeud qui l'acceptera
    if(!subdivided){
      subdivide();
      subdivided = true;
    }
    
    for(QuadTree qt : child){
      if(qt.insert(p)){
        return true;
      }
    }
    // Sinon, le point ne peut etre insere,
    // pour une raison inconnue (cela ne devrait jamais arriver)
    return false;
  }
  
  void subdivide(){
    for(int j = -1; j< 2; j+=2){
      for(int i = -1; i< 2; i+=2){
        child.add(new QuadTree(boundary.x + (i * boundary.sizeX/4),
                               boundary.y + (j * boundary.sizeY/4),
                               boundary.sizeX/2,
                               boundary.sizeY/2,
                               level+ 1));
      }
    }
  }
  
  void getChildDim(){
    if(child != null){
      for(QuadTree ch: child){
        println(ch.boundary.x, ch.boundary.y, ch.boundary.sizeX, ch.boundary.sizeY, "; ");	  
      }
    }
  }
  
  ArrayList<Particle> queryRange(AABB range){
    ArrayList<Particle> pointsInRange = new ArrayList<Particle>();
    
    if(!(boundary.intersectsAABB(range))) {
    	
      return pointsInRange;
    }
    
    for(Particle p: points){
      if(range.containsPoint(p.pos.x,p.pos.y))
        pointsInRange.add(p);
    }
    
    if(!subdivided){
      return pointsInRange;
    }
    for(QuadTree qt: child){
      pointsInRange.addAll(qt.queryRange(range));
    }
    return pointsInRange;
  }
}