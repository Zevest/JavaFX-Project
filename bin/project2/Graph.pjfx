class Graph {
  ArrayList<Node> nodes;
  ArrayList<PVector> binds;
  ArrayList<Ant> ants;
  float maxDist = sqrt(width*width + height*height)/1.3f;
  int antPerNode = 2;
  Graph(int n){
    ants = new ArrayList<Ant>();
    nodes = new ArrayList<Node>();
    binds = new ArrayList<PVector>();
    for(int i = 0; i< n; ++i){
      nodes.add(new Node());
      for(int j = 0; j < antPerNode; ++j){
        ants.add(new Ant(i));
      }
    }
  }
  
  Graph(int n, int k){
    ants = new ArrayList<Ant>();
    nodes = new ArrayList<Node>();
    binds = new ArrayList<PVector>();
    for(int i = 0; i< n; ++i){
      nodes.add(new Node());
      for(int j = 0; j < antPerNode; ++j){
        ants.add(new Ant(i));
      }
    }
    initBinds(k);
  }
  
  void initNodes(int n){
    for(int i = 0; i< n; ++i){
      nodes.set(i,new Node());
    }
  }
  void initBinds(int n){
    int count = 0;
    while(count < n){
      if(bind((int) random(nodes.size()),(int) random(nodes.size())))
        count++;
    }
  }
  
  void connectAll(){
    binds = new ArrayList<PVector>();
    for(int i = 0; i < nodes.size(); ++i){
      for(int j = i+1; j < nodes.size(); ++j){
       bind(i,j); 
      } 
    }
  }
  
  void resetBinds(){
    int count = 0;
    while(count < binds.size()){
      if(rebind(count, (int) random(nodes.size()),(int) random(nodes.size())))
        count++;
    }
  }
  
  void showOutput(){
    println("Possible: ");
    for(Ant a: ants){
      ArrayList<Integer> possible = a.genPossible(binds.size());
      ArrayList<Float> proba = genProba(possible);
      println(proba);
    }
  }
  
  ArrayList<Float> genProba(ArrayList<Integer> Possible){
    ArrayList<Float> p = new ArrayList<Float>();
    for(int i: Possible){
      PVector data = binds.get(i);
      float dij = data.z - (int)data.z;
      float TRij = _int(data.z) / 10000f;
      println(dij, TRij);
      p.add(TRij / pow(dij, 7));
    }
    return p;
  }
  
  void resetAll(){
    int n = nodes.size();
    nodes = new ArrayList<Node>();
    binds = new ArrayList<PVector>();
    for(int i = 0; i< n; ++i){
      nodes.add(new Node());
    }
    connectAll();
  }
  
  boolean bind(int a, int b){
    if(a == b)
      return false;
    for(PVector p: binds){
      if(((int) p.x == a && b == (int) p.y)  || 
        ((int) p.y == a && b == (int) p.x))
        return false;
    }
    Node s = nodes.get(a), e = nodes.get(b);
    binds.add(new PVector(a, b, (int) random(10000) + min(0.9999999999,dist(s.x, s.y, e.x, e.y)/maxDist)));
    return true;
  }
  boolean rebind(int i, int a, int b){
    if(a == b)
      return false;
    for(PVector p: binds){
      if(((int) p.x == a && b == (int) p.y)  || 
        ((int) p.y == a && b == (int) p.x))
        return false;
    }
    binds.set(i, new PVector(a, b));
    return true;
  }
  
  void display(){
    
    strokeWeight(10);
    for(PVector p: binds){
      float val = p.z - (int) p.z;
      float p2 = (p.z - val)/10000;
      stroke(val* 255 , (1-val)*200, p2 * 255);
      Node a = nodes.get((int)p.x);
      Node b = nodes.get((int)p.y);
      line(a.x, a.y, b.x, b.y);
    }
    
    noStroke();
    for(Node n: nodes){
      
      n.display();
    }
    
    
  }
  

}